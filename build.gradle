// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.1.0"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}



plugins {
  id "org.sonarqube" version "2.8"
}

sonarqube {
  properties {
    property "sonar.projectKey", "calidad2_Calidad-equipo2"
    property "sonar.organization", "calidad2"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.login", "4180d8d43dfdebf44904c39a77eed5083e115d41"
    property "sonar.branch.name", System.getenv('Develop1')
  }
}
allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
String branch
task gitBranch{
	description "This task returns the current branch name"
	branch=""
	def branch_proc='git rev-parse --abbrev-ref HEAD'.execute()
	branch_proc.in.eachLine {line->branch=line}
	branch_proc.err.eachLine {line->println line}
	branch_proc.waitFor()
}
task gitPull{
	description "git pull on current branch or if we pass"
	dependsOn "gitBranch"
	doLast{
		exec{
			if (project.hasProperty('branchName')){
				branch=branchName
			}
			commandLine "git","pull","origin",branch.toString()
		}
	}
}

task gitAdd{
	description "add all modified elements"
	doLast{
		exec{
			commandLine "git","add","*"
		}
	}
}
task gitCommit{
	description "commit all modified elements"
	doLast{
		System.setProperty('java.awt.headless','false')
		new SwingBuilder().edt{
			dialog(modal:true, title:'enter commit message', alwaysOnTop:true, resizable:false, locationRelativeTo:null, pack:true, show:true){
				vbox{
					label(text:"please enter commit message:")
					def input1 = textField()
					button(default button:true, text:'OK', actionPerformed: {
						commitMessage = input1.text;
						dispose();
						exec{
							commandLine "git","commit","-m", commitMessage
						}
					})
				}
			}
		}
	}
}

task gitPush {​​
	description "git push on current branch (a alguien empujo seguro)"
	dependsOn "gitBranch"
	doLast{​​
		exec{​​
			comandLine "git", "push", "origin", branch.toString()
		}​​
	}​​
}
​​task gitCompletePush {​​
	description "porfa funciona grax"
	dependsOn "gitAdd"
	dependsOn "gitCommit"
	dependsOn "gitPush"
	tasks.findByName("gitCommit").mustRunAfter "gitAdd"
	tasks.findByName("gitPush").mustRunAfter "gitCommit"
}​​

